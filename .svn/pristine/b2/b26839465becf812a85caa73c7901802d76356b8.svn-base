//// Vars.
var mongoose = require('mongoose');
var bodyParser = require('body-parser');
var express = require('express');
var app = express();
var server = require('http').Server(app);
var http = require('http');
var io = require('socket.io').listen(server);
var routes = require('./routes/routes');
var routesSecure = require('./routes/routesSecure');

var listPlayersConnected = [];

//// User To Send HTTP Request.
function SendHTTPRequest(socket, data, pathUrl) {
    console.log('SendHTTPRequest: With Data ' + data + '. Path: ' + pathUrl);

    const req = http.request(
        {
            host: 'localhost',
            port: '5000',
            path: pathUrl,
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            }
        }, function(error, response, body){
            console.log('SendHTTPRequest: RES Data1 ' + body);
            console.log('SendHTTPRequest: RES Data2 ' + response);
            //console.log('SendHTTPRequest: RES Data2 ' + response.body);
            socket.on('data', function(chunk){
                console.log('SendHTTPRequest: RES Data2 ' + chunk);
            });

            socket.on('end', function(){
                console.log('SendHTTPRequest: RES Data3 ' + req.data);
            })
        }
        // response => {
        //     console.log('SendHTTPRequest: RES Code = ' + response.statusCode);
        //     console.log('SendHTTPRequest: RES Data = ' + JSON.stringify(response.data));
        //     console.log('SendHTTPRequest: RES Data = ' + JSON.parse(response.data));
        // }
    );

    req.write(data);
    req.end();
    console.log('SendHTTPRequest: RES Data End');
}
var scores = {
    blue: 0,
    red: 0
  };
//// Socket IO.
io.on('connection', function (socket) {
    // Check User Connect Or Disconnect.
    console.log('A User Connected');

    // Add New Player Into The List.
    //listPlayersConnected[socket.id] = {playerID: socket.id};
    listPlayersConnected.push(socket.id);
    listPlayersConnected.push(socket.id);
    listPlayersConnected.push(socket.id);

    socket.on('message', function (data) {
        socket.emit('news', { hello: 'world' });
        console.log('messsagsges sersfsdlfsdklfas');
      });
    
      socket.on('another-message', function (data) {
        console.log('messsagsges sersfsdlfsdklfas');
        socket.emit('not-news', { hello: 'world' });
      });

    socket.emit('logo', scores);
    socket.broadcast.emit('aPlayerUpdatedTheirScore', 'fasdf');

    console.log('A User Connected With ID: ' + socket.id);

    // Remove The Player If Disconnect.
    socket.on('disconnect', function () {
        console.log('User Disconnected');

        delete listPlayersConnected[socket.id];
    });

    // SOCKET.IO: Player Login.
    socket.on('PlayerLogin', function (data) {
        console.log('PlayerLogin.');

        SendHTTPRequest(socket, data, '/login');
    });

    // SOCKET.IO: Change Player Name.
    socket.on('ChangePlayerName', function (data) {
        console.log('Change Player Name.');

        SendHTTPRequest(socket, data, '/changePlayerName');
    });

    // SOCKET.IO: Submit Score.
    socket.on('SubmitScore', function (data) {
        console.log('SubmitScore.');

        SendHTTPRequest(socket, data, '/submitScore');
        SendHTTPRequest(socket, data, '/timesUserUpdated');

        // Send Broadcast To Other User.
        var userInfo = {
            email: data.email,
        };
        console.log('SubmitScore 1111111111: ' + data.email);
        console.log('SubmitScore 1111111111: ' + data);
        socket.broadcast.emit('aPlayerUpdatedTheirScore', data);

        console.log('SubmitScore. 1 ' + listPlayersConnected.length);
        for(var i = 0; i < listPlayersConnected.length; i++){
            console.log('Player' + i + ', with ID: ' + listPlayersConnected[i]);
        }
    });

    // SOCKET.IO: Get User Info.
    socket.on('GetUserInfo', function(data){
        console.log('Get User Info');

        SendHTTPRequest(socket, data, '/getUserInfo');
    });
});

//// Mongo. Create Mongo Connection.
const uri = 'mongodb+srv://admin:admin@cluster0-z6bg3.mongodb.net/ShooterGame?retryWrites=true';

mongoose.connect(uri, { useNewUrlParser: true, useCreateIndex: true });

mongoose.connection.on('error', (error) => {
    console.log('Connect Mongo ERROR: ' + error);
    process.exit(1);
});

mongoose.connection.on('connected', function () {
    console.log('Connected To Mongo.');
});

//// App. Parse The Body Of Incomming Requests.
app.use(bodyParser.urlencoded({ extended: false }));
app.use(bodyParser.json());
app.use(express.static(__dirname + '/../public'));      // Work With Static Such As Image, CSS, JS.
app.use('/', routes);
app.use('/', routesSecure);

//// Server Listen.
server.listen(5000, function () {
    console.log('\nServer Is Listening On Port: ' + server.address().port);
    console.log('=================================');
});