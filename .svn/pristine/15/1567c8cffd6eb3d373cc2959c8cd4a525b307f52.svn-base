//// Vars.
var mongoose = require('mongoose');
var bodyParser = require('body-parser');
var express = require('express');
var app = express();
var server = require('http').Server(app);
var http = require('http');
var io = require('socket.io').listen(server);
var routes = require('./routes/routes');
var routesSecure = require('./routes/routesSecure');

function SendHTTPRequest(data, pathUrl) {
    console.log('SendHTTPRequest: With Data ' + data + '. Path: ' + pathUrl);

    const req = http.request(
        {
            host: 'localhost',
            port: '5000',
            path: pathUrl,
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            }
        },
        response => {
            console.log(response.statusCode);
        }
    );

    req.write(data);
    req.end();
}

//// Socket IO.
io.on('connection', function (socket) {
    console.log('A User Connected');

    socket.on('disconnect', function () {
        console.log('User Disconnected');
    });

    socket.on('PlayerLogin', function (data) {
        console.log('PlayerLogin');
        
        SendHTTPRequest(data, '/login');
    });

    // SOCKET.IO: Change Player Name.
    socket.on('ChangePlayerName', function (data) {
        console.log('Change Player Name Data: ' + data);

        const req = http.request(
            {
                host: 'localhost',
                port: '5000',
                path: '/changePlayerName',
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                }
            },
            response => {
                console.log(response.statusCode);
            }
        );

        req.write(data);
        req.end();
    });

    // SOCKET.IO: Submit Score.
    socket.on('SubmitScore', function (data) {
        console.log('SubmitScore Data: ' + data);

        const req = http.request(
            {
                host: 'localhost',
                port: '5000',
                path: '/submitScore',
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                }
            },
            response => {
                console.log(response.statusCode);
            }
        );

        req.write(data);
        req.end();
    });
});

//// Mongo. Create Mongo Connection.
const uri = 'mongodb+srv://admin:admin@cluster0-z6bg3.mongodb.net/ShooterGame?retryWrites=true';

mongoose.connect(uri, { useNewUrlParser: true, useCreateIndex: true });

mongoose.connection.on('error', (error) => {
    console.log('Connect Mongo ERROR: ' + error);
    process.exit(1);
});

mongoose.connection.on('connected', function () {
    console.log('Connected To Mongo.');
});

//// App. Parse The Body Of Incomming Requests.
app.use(bodyParser.urlencoded({ extended: false }));
app.use(bodyParser.json());
app.use(express.static(__dirname + '/../public'));      // Work With Static Such As Image, CSS, JS.
app.use('/', routes);
app.use('/', routesSecure);

//// Server Listen.
server.listen(5000, function () {
    console.log('\nServer Is Listening On Port: ' + server.address().port);
    console.log('=================================');
});